diff --git a/packages/core/src/hooks/form/index.spec.tsx b/packages/core/src/hooks/form/index.spec.tsx
index 544692d322d9..59804b320ccf 100644
--- a/packages/core/src/hooks/form/index.spec.tsx
+++ b/packages/core/src/hooks/form/index.spec.tsx
@@ -1058,6 +1058,168 @@ describe("useForm Hook", () => {
     });
   });
 
+  describe("queryOptions.enabled behavior", () => {
+    it("should not make API call when external enabled is true but id is undefined", async () => {
+      const getOneMock = vi.fn();
+
+      renderHook(
+        () =>
+          useForm({
+            resource: "posts",
+            action: "edit",
+            // id is undefined
+            queryOptions: {
+              enabled: true, // This should not override the internal id check
+            },
+          }),
+        {
+          wrapper: TestWrapper({
+            dataProvider: {
+              default: {
+                ...MockJSONServer.default,
+                getOne: getOneMock,
+              },
+            },
+            resources: [{ name: "posts" }],
+          }),
+        },
+      );
+
+      await waitFor(() => {
+        // Should not make the API call because id is undefined
+        expect(getOneMock).not.toHaveBeenCalled();
+      });
+    });
+
+    it("should make API call when both internal condition (id defined) and external enabled are true", async () => {
+      const getOneMock = vi.fn();
+
+      renderHook(
+        () =>
+          useForm({
+            resource: "posts",
+            action: "edit",
+            id: "1", // id is defined
+            queryOptions: {
+              enabled: true, // external enabled is true
+            },
+          }),
+        {
+          wrapper: TestWrapper({
+            dataProvider: {
+              default: {
+                ...MockJSONServer.default,
+                getOne: getOneMock,
+              },
+            },
+            resources: [{ name: "posts" }],
+          }),
+        },
+      );
+
+      await waitFor(() => {
+        // Should make the API call because both conditions are met
+        expect(getOneMock).toHaveBeenCalled();
+      });
+    });
+
+    it("should not make API call when external enabled is false even if id is defined", async () => {
+      const getOneMock = vi.fn();
+
+      renderHook(
+        () =>
+          useForm({
+            resource: "posts",
+            action: "edit",
+            id: "1", // id is defined
+            queryOptions: {
+              enabled: false, // external enabled is false
+            },
+          }),
+        {
+          wrapper: TestWrapper({
+            dataProvider: {
+              default: {
+                ...MockJSONServer.default,
+                getOne: getOneMock,
+              },
+            },
+            resources: [{ name: "posts" }],
+          }),
+        },
+      );
+
+      await waitFor(() => {
+        // Should not make the API call because external enabled is false
+        expect(getOneMock).not.toHaveBeenCalled();
+      });
+    });
+
+    it("should not make API call when id is undefined even if external enabled is not provided", async () => {
+      const getOneMock = vi.fn();
+
+      renderHook(
+        () =>
+          useForm({
+            resource: "posts",
+            action: "edit",
+            // id is undefined
+            queryOptions: {
+              // enabled is not provided, should default to true
+            },
+          }),
+        {
+          wrapper: TestWrapper({
+            dataProvider: {
+              default: {
+                ...MockJSONServer.default,
+                getOne: getOneMock,
+              },
+            },
+            resources: [{ name: "posts" }],
+          }),
+        },
+      );
+
+      await waitFor(() => {
+        // Should not make the API call because id is undefined
+        expect(getOneMock).not.toHaveBeenCalled();
+      });
+    });
+
+    it("should make API call when id is defined and external enabled is not provided (defaults to true)", async () => {
+      const getOneMock = vi.fn();
+
+      renderHook(
+        () =>
+          useForm({
+            resource: "posts",
+            action: "edit",
+            id: "1", // id is defined
+            queryOptions: {
+              // enabled is not provided, should default to true
+            },
+          }),
+        {
+          wrapper: TestWrapper({
+            dataProvider: {
+              default: {
+                ...MockJSONServer.default,
+                getOne: getOneMock,
+              },
+            },
+            resources: [{ name: "posts" }],
+          }),
+        },
+      );
+
+      await waitFor(() => {
+        // Should make the API call because id is defined and enabled defaults to true
+        expect(getOneMock).toHaveBeenCalled();
+      });
+    });
+  });
+
   describe("warn messages", () => {
     const warnMock = vi.fn();
 
diff --git a/packages/core/src/hooks/form/index.ts b/packages/core/src/hooks/form/index.ts
index 578e42edfa93..94fdc11edc27 100644
--- a/packages/core/src/hooks/form/index.ts
+++ b/packages/core/src/hooks/form/index.ts
@@ -159,7 +159,8 @@ export const useForm = <
     id,
     queryOptions: {
       // Only enable the query if it's not a create action and the `id` is defined
-      enabled: !isCreate && id !== undefined,
+      // AND the external enabled condition (if provided) is also true
+      enabled: (!isCreate && id !== undefined) && (props.queryOptions?.enabled ?? true),
       ...props.queryOptions,
     },
     liveMode: props.liveMode,
