diff --git a/packages/core/src/hooks/data/useList.ts b/packages/core/src/hooks/data/useList.ts
index ad981ae445f6..c2ee9a7a39c9 100644
--- a/packages/core/src/hooks/data/useList.ts
+++ b/packages/core/src/hooks/data/useList.ts
@@ -101,6 +101,8 @@ export type UseListReturnType<TData, TError> = {
   };
 } & UseLoadingOvertimeReturnType;
 
+const EMPTY_ARRAY: readonly [] = Object.freeze([]);
+
 /**
  * `useList` is a modified version of `react-query`'s {@link https://tanstack.com/query/v5/docs/framework/react/guides/queries `useQuery`} used for retrieving items from a `resource` with pagination, sort, and filter configurations.
  *
@@ -315,7 +317,7 @@ export const useList = <
   return {
     query: queryResponse,
     result: {
-      data: queryResponse?.data?.data || [],
+      data: queryResponse?.data?.data || EMPTY_ARRAY,
       total: queryResponse?.data?.total,
     },
     overtime: { elapsedTime },
diff --git a/packages/core/src/hooks/data/useMany.ts b/packages/core/src/hooks/data/useMany.ts
index 8d2b1f3d6fba..3ff841d3b68b 100644
--- a/packages/core/src/hooks/data/useMany.ts
+++ b/packages/core/src/hooks/data/useMany.ts
@@ -85,6 +85,8 @@ export type UseManyProps<TQueryFnData, TError, TData> = {
   LiveModeProps &
   UseLoadingOvertimeOptionsProps;
 
+const EMPTY_ARRAY: readonly [] = Object.freeze([]);
+
 /**
  * `useMany` is a modified version of `react-query`'s {@link https://tanstack.com/query/v5/docs/framework/react/guides/queries `useQuery`} used for retrieving multiple items from a `resource`.
  *
@@ -259,7 +261,7 @@ export const useMany = <
   return {
     query: queryResponse,
     result: {
-      data: queryResponse?.data?.data || [],
+      data: queryResponse?.data?.data || EMPTY_ARRAY,
     },
     overtime: { elapsedTime },
   };
diff --git a/packages/core/src/hooks/useTable/index.ts b/packages/core/src/hooks/useTable/index.ts
index 85641c11973f..bb056898dfd0 100644
--- a/packages/core/src/hooks/useTable/index.ts
+++ b/packages/core/src/hooks/useTable/index.ts
@@ -176,6 +176,7 @@ export type useTableReturnType<
 
 const defaultPermanentFilter: CrudFilter[] = [];
 const defaultPermanentSorter: CrudSort[] = [];
+const EMPTY_ARRAY: readonly [] = Object.freeze([]);
 
 export function useTable<
   TQueryFnData extends BaseRecord = BaseRecord,
@@ -434,7 +435,7 @@ export function useTable<
     createLinkForSyncWithLocation,
     overtime: queryResult.overtime,
     result: {
-      data: queryResult.result?.data || [],
+      data: queryResult.result?.data || EMPTY_ARRAY,
       total: queryResult.result?.total,
     },
   };
